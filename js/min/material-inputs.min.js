(function () {
    'use strict'; let textfieldInputs = document.getElementsByClassName('textfield__input'); for (let i = 0; i < textfieldInputs.length; i++) { textfieldInputs[i].addEventListener('blur', ToggleActive); AddLabel(textfieldInputs[i]); if (textfieldInputs[i].classList.contains('auto-resize')) { textfieldInputs[i].classList.add('is-upgraded'); let mirroredTextarea = document.createElement('div'); mirroredTextarea.classList.add('textfield__mirrored-textarea'); textfieldInputs[i].parentElement.appendChild(mirroredTextarea); textfieldInputs[i].addEventListener('input', function () { Resize(this, mirroredTextarea) }); window.addEventListener('resize', function () { Resize(textfieldInputs[i], mirroredTextarea) }) } }
    function ToggleActive() {
        console.log(this.value); if (this.value)
            this.classList.add('is-active'); else this.classList.remove('is-active')
    }
    function Resize(textarea, mirroredTextarea) { mirroredTextarea.textContent = textarea.value; textarea.style.height = mirroredTextarea.scrollHeight + 'px' }
    function AddLabel(textfieldInput) {
        if (!textfieldInput.placeholder)
            return; let label = document.createElement('label'); label.classList.add('textfield__label'); label.innerHTML = textfieldInput.placeholder; textfieldInput.placeholder = ''; textfieldInput.parentElement.appendChild(label)
    }
})(); (function () {
    'use strict'; let sliderInputs = document.getElementsByClassName('slider__input'); let isIE = navigator.userAgent.match(/Trident/g) || navigator.userAgent.match(/MSIE/g); if (isIE) { let isActive = !1; for (let i = 0; i < sliderInputs.length; i++) { HandleSliderProgress(sliderInputs[i]); sliderInputs[i].addEventListener('mousedown', function () { isActive = !0; let self = this; setTimeout(function () { HandleSliderProgress(self) }, 0) }); sliderInputs[i].addEventListener('mouseup', function () { isActive = !1; HandleSliderProgress(this) }); sliderInputs[i].addEventListener('mousemove', function () { if (!isActive) return; HandleSliderProgress(this) }) } } else { for (let i = 0; i < sliderInputs.length; i++) { HandleSliderProgress(sliderInputs[i]); sliderInputs[i].addEventListener('input', function () { HandleSliderProgress(this) }) } }
    function HandleSliderProgress(sliderInput) { let progressBar = sliderInput.parentElement.getElementsByClassName('slider__progressbar')[0]; let percentage = (sliderInput.value - sliderInput.min) / (sliderInput.max - sliderInput.min); progressBar.style.width = (percentage * 100 + '%') }
})()